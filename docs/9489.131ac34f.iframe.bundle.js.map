{"version":3,"file":"9489.131ac34f.iframe.bundle.js","mappings":";;AAcA;;AAOA;;;;;;;;;;;;;;;;AAgBA;AAMA;AACA;AACA;AAIA;AAEA;AAbA;AAeA;AAIA;AACA;;;;AAOA;;;AAKA;;AAGA;;AAKA;;;AAKA;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;;AAIA","sources":["webpack://personal-design/./src/components/Dropdown/styles.ts","webpack://personal-design/./src/components/Loading/styles.ts"],"sourcesContent":["import { ArrowDownIcon } from \"assets\";\nimport styled, { css } from \"styled-components\";\n\nexport interface DropdownStyleProps {\n  open?: boolean;\n  fullWidth?: boolean;\n  outlined?: boolean;\n  bordered?: boolean;\n  disabled?: boolean;\n  centralized?: boolean;\n  positionIcon?: \"start\" | \"end\";\n}\n\nexport const Container = styled.div<Pick<DropdownStyleProps, \"fullWidth\">>`\n  width: ${({ fullWidth }) => (fullWidth ? \"100%\" : \"max-content\")};\n  position: relative;\n`;\n\ninterface DropdownContentProps\n  extends Omit<DropdownStyleProps, \"open\" | \"centralized\" | \"positionIcon\"> {}\n\nexport const DropdownContent = styled.div<DropdownContentProps>`\n  width: 100%;\n  height: 4rem;\n  border-radius: 0.4rem;\n  padding: 0.9rem 1.6rem;\n  font-size: 1.4rem;\n  font-weight: 400;\n\n  background-color: transparent;\n  border: 0.1rem solid transparent;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n\n  ${({ disabled, bordered, outlined }) => {\n    const bg = \"var(--neutral)\";\n    const textColor = disabled ? \"var(--neutral-400)\" : \"var(--blue-dark-600)\";\n\n    if (bordered) {\n      return css`\n        color: ${textColor};\n        border-color: ${textColor};\n        cursor: ${disabled ? \"no-drop\" : \"pointer\"};\n      `;\n    }\n\n    if (outlined) {\n      return css`\n        color: ${textColor};\n        background-color: ${bg};\n        cursor: ${disabled ? \"no-drop\" : \"pointer\"};\n      `;\n    }\n\n    return css`\n      background-color: ${textColor};\n      color: var(--white);\n      cursor: pointer;\n    `;\n  }}\n`;\n\nexport const TextContent = styled.div<\n  Pick<DropdownStyleProps, \"centralized\" | \"positionIcon\">\n>`\n  flex: 1;\n  display: flex;\n  justify-content: ${({ centralized }) =>\n    centralized ? \"center\" : \"flex-start\"};\n  align-items: center;\n  flex-direction: ${({ positionIcon }) =>\n    positionIcon === \"end\" ? \"row-reverse\" : \"row\"};\n  gap: 1rem;\n`;\n\nexport const ArrowIcon = styled(ArrowDownIcon)<\n  Pick<DropdownStyleProps, \"open\">\n>`\n  transition: 250ms ease-in-out;\n\n  ${({ open }) =>\n    open &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\nexport const ItemsContent = styled.dialog`\n  width: max-content;\n  min-width: 100%;\n  max-height: 17.4rem;\n  overflow-y: auto;\n  position: absolute;\n  left: 0;\n  right: 0;\n  border-radius: 0.4rem;\n  background-color: var(--white);\n  border: 0.1rem solid var(--neutral-400);\n  padding: 0.8rem;\n  z-index: 5;\n\n  bottom: -0.4rem;\n  transform: translateY(100%);\n\n  &[open] {\n    color: var(--text);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport interface LoadingStyleProps {\n  centered?: boolean;\n}\n\nexport const LoadingContainer = styled.div<LoadingStyleProps>`\n  margin: ${({ centered = false }) => (centered ? \"0 auto\" : \"initial\")};\n  width: max-content;\n`;\n\nexport const LoadingContent = styled.div`\n  width: 1.5rem;\n  height: 1.5rem;\n  margin: 0.2rem;\n  border: 0.2rem solid currentColor;\n  border-radius: 50%;\n  border-top-color: transparent;\n  border-bottom-color: transparent;\n  animation: rotating 1s infinite;\n\n  @keyframes rotating {\n    to {\n      transform: rotate(1turn);\n    }\n  }\n`;\n"],"names":[],"sourceRoot":""}