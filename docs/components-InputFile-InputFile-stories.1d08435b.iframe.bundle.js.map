{"version":3,"file":"components-InputFile-InputFile-stories.1d08435b.iframe.bundle.js","mappings":";;AA0DA;AACA;;;;;;;;;AASA;;;;;;;;;;AAUA;AAQA;;;;;AAOA;AAEA;AACA;;;AAGA;AACA;AACA;;AAKA;AAEA;AACA;;;AAGA;AACA;;AAKA;AACA;AACA;;;AAGA;AACA;;;;;;;;;;;;AC/FA;;AAMA;AACA;AAGA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;;;;;;;;;;;AAaA;;;;;;;;;;;AC1CA;;AAIA","sources":["webpack://personal-design/./src/components/Button/styles.ts","webpack://personal-design/./src/components/Chip/styles.ts","webpack://personal-design/./src/components/InputFile/styles.ts","webpack://personal-design/./src/components/Loading/styles.ts"],"sourcesContent":["import type { ButtonHTMLAttributes } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nexport type ButtonVariant = \"default\" | \"success\" | \"danger\" | \"link\";\n\nexport interface ButtonStyleProps\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  fullWidth?: boolean;\n  minWidth?: boolean;\n  small?: boolean;\n  bordered?: boolean;\n  outlined?: boolean;\n  disabled?: boolean;\n}\n\nconst getColorsByVariant = (variant?: ButtonVariant, disabled?: boolean) => {\n  if (disabled)\n    return [\n      \"var(--neutral)\",\n      \"var(--neutral-400)\",\n      \"var(--neutral-400)\",\n      \"var(--neutral)\",\n    ];\n\n  switch (variant) {\n    case \"success\":\n      return [\n        \"var(--white)\",\n        \"var(--green-light-600)\",\n        \"var(--green-light-800)\",\n        \"var(--green-light-100)\",\n      ];\n    case \"danger\":\n      return [\n        \"var(--white)\",\n        \"var(--red-light-600)\",\n        \"var(--red-light-800)\",\n        \"var(--red-light-100)\",\n      ];\n    case \"link\":\n      return [\n        \"var(--blue-dark-600)\",\n        \"transparent\",\n        \"transparent\",\n        \"transparent\",\n      ];\n    default:\n      return [\n        \"var(--white)\",\n        \"var(--blue-dark-600)\",\n        \"var(--blue-dark-800)\",\n        \"var(--neutral)\",\n      ];\n  }\n};\n\nexport const Container = styled.button<ButtonStyleProps>`\n  width: ${({ fullWidth }) => (fullWidth ? \"100%\" : \"max-content\")};\n  min-width: ${({ minWidth }) => (minWidth ? `12rem` : \"inital\")};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n  border-radius: 0.4rem;\n  outline: transparent;\n  background-color: transparent;\n  border: 0.1rem solid transparent;\n  padding: ${({ small }) => (small ? \"0.5rem 1.6rem\" : \"0.9rem 1.6rem\")};\n\n  &:focus {\n    outline: 0.2rem solid var(--gray);\n  }\n\n  > code:empty {\n    display: none;\n  }\n\n  ${({ variant, bordered, outlined, disabled }) => {\n    const [textColor, bg, bgHover, bgOutline] = getColorsByVariant(\n      variant,\n      disabled\n    );\n\n    if (variant === \"link\")\n      return css`\n        color: ${textColor};\n\n        &:hover {\n          text-decoration: underline;\n        }\n      `;\n\n    if (bordered) {\n      return css`\n        color: ${bg};\n        border-color: ${bg};\n\n        &:hover {\n          color: ${bgHover};\n          border-color: ${bgHover};\n          cursor: ${disabled ? \"no-drop\" : \"pointer\"};\n        }\n      `;\n    }\n\n    if (outlined) {\n      return css`\n        color: ${bg};\n        background-color: ${bgOutline};\n\n        &:hover {\n          color: ${bgHover};\n          cursor: ${disabled ? \"no-drop\" : \"pointer\"};\n        }\n      `;\n    }\n\n    return css`\n      background: ${bg};\n      color: ${textColor};\n\n      &:hover {\n        background: ${bgHover};\n        cursor: ${disabled ? \"no-drop\" : \"pointer\"};\n      }\n    `;\n  }}\n`;\n","import styled, { css } from \"styled-components\";\n\nexport type ChipVariant = \"default\" | \"success\" | \"danger\";\n\nexport interface ChipStyleProps {\n  variant?: ChipVariant;\n  bordered?: boolean;\n}\n\nconst getColorsByVariant = (variant: ChipVariant) => {\n  switch (variant) {\n    case \"success\":\n      return [\"var(--green-light-600)\", \"var(--green-light-100)\"];\n    case \"danger\":\n      return [\"var(--red-light-600)\", \"var(--red-light-100)\"];\n    default:\n      return [\"var(--blue-dark-800)\", \"var(--neutral)\"];\n  }\n};\n\nexport const Container = styled.div<ChipStyleProps>`\n  width: max-content;\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  border-radius: 0.4rem;\n  font-size: 1.4rem;\n  line-height: 1.8rem;\n\n  ${({ variant = \"default\", bordered }) => {\n    const [color, bg] = getColorsByVariant(variant);\n\n    if (bordered)\n      return css`\n        padding: 0.5rem 1.5rem;\n        border: 0.1rem solid ${color};\n        color: ${color};\n      `;\n\n    return css`\n      padding: 0.6rem 1.6rem;\n      background-color: ${bg};\n      color: ${color};\n    `;\n  }}\n\n  > span {\n    font-size: 1.8rem;\n    line-height: 1.8rem;\n    font-weight: 900;\n    cursor: pointer;\n  }\n`;\n","import { Button } from \"components/Button\";\nimport styled from \"styled-components\";\n\nexport const InputFileContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 12.2rem;\n  border: 0.1rem dashed var(--neutral-400);\n  border-radius: 0.4rem;\n  padding: 1.6rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 1rem;\n\n  > div:first-child {\n    max-height: 100%;\n    overflow: auto;\n    z-index: 2;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 1rem;\n\n    > p {\n      pointer-events: none;\n    }\n  }\n\n  > button {\n    z-index: 2;\n    min-width: max-content;\n  }\n`;\n\nexport const HiddenInputFile = styled.input.attrs({ type: \"file\" })`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  width: 100%;\n  opacity: 0;\n  z-index: 0;\n  pointer-events: fill;\n`;\n\nexport const CustomButton = styled(Button)`\n  color: var(--blue-dark-600);\n  border-color: var(--blue-dark-600);\n  background-color: var(--white);\n\n  &:hover {\n    color: var(--blue-dark-800);\n    border-color: var(--blue-dark-800);\n    background-color: var(--white);\n  }\n`;\n","import styled from \"styled-components\";\n\nexport interface LoadingStyleProps {\n  centered?: boolean;\n}\n\nexport const LoadingContainer = styled.div<LoadingStyleProps>`\n  margin: ${({ centered = false }) => (centered ? \"0 auto\" : \"initial\")};\n  width: max-content;\n`;\n\nexport const LoadingContent = styled.div`\n  width: 1.5rem;\n  height: 1.5rem;\n  margin: 0.2rem;\n  border: 0.2rem solid currentColor;\n  border-radius: 50%;\n  border-top-color: transparent;\n  border-bottom-color: transparent;\n  animation: rotating 1s infinite;\n\n  @keyframes rotating {\n    to {\n      transform: rotate(1turn);\n    }\n  }\n`;\n"],"names":[],"sourceRoot":""}