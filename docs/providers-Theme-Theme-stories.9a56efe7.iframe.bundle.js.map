{"version":3,"file":"providers-Theme-Theme-stories.9a56efe7.iframe.bundle.js","mappings":";;;;;;;;;AAeA;;;;AAMA;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;;;;;;;;;;;;;;;ACyBA;;;;;AAOA;;;AAGA;AAGA;;;;;;;;;;;;;AAeA;;;;;AAOA;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;;;;AAOA;AAEA;;;;AAKA;;;;;AAMA;;;;AAKA;AAEA;;;;AAKA;;;;;;ACxDA","sources":["webpack://personal-design/./src/components/Dialog/styles.ts","webpack://personal-design/./src/components/Modal/styles.ts","webpack://personal-design/./src/components/ModalMain/styles.ts","webpack://personal-design/./src/components/Toast/styles.ts","webpack://personal-design/./src/providers/Toast/styles.ts","webpack://personal-design/./src/providers/Toast/Toast.tsx"],"sourcesContent":["import { ModalFooter } from \"components/ModalFooter\";\nimport { ModalHeader } from \"components/ModalHeader\";\nimport { ModalMain } from \"components/ModalMain\";\nimport styled from \"styled-components\";\n\nexport const DialogModalHeader = styled(ModalHeader)`\n  border: initial;\n  width: 40rem;\n  align-items: flex-start;\n\n  > button {\n    height: 3rem;\n  }\n`;\n\nexport const DialogModalMain = styled(ModalMain)`\n  p {\n    text-align: justify;\n  }\n`;\n\nexport const DialogModalFooter = styled(ModalFooter)`\n  background-color: var(--white);\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: rgba(0, 0, 0, 0.35);\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 10vh;\n  z-index: 15;\n`;\n\nexport const ModalContent = styled.div`\n  width: 40rem;\n  background-color: var(--white);\n  border-radius: 0.4rem;\n  animation: modal-fade-in 0.5s;\n\n  &:has(footer) main {\n    max-height: calc(80vh - 14.6rem);\n  }\n\n  @keyframes modal-fade-in {\n    from {\n      transform: translateY(-1rem);\n    }\n\n    to {\n      transform: translateY(0);\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport interface ModalMainStyleProps {\n  noOverflow?: boolean;\n}\n\nexport const Container = styled.main<ModalMainStyleProps>`\n  position: relative;\n  width: 100%;\n  max-height: calc(80vh - 7.3rem);\n  transition: height ease-in-out 0.2s;\n  padding: 1.6rem;\n  overflow-y: ${({ noOverflow }) => (noOverflow ? \"initial\" : \"auto\")};\n`;\n","import { Button } from \"components/Button\";\nimport { IconButton } from \"components/IconButton\";\nimport styled from \"styled-components\";\n\nexport type ToastVariant = \"success\" | \"error\" | \"warning\" | \"info\";\n\nexport interface ToastStyleProps {\n  variant?: ToastVariant;\n}\n\nconst getColorByVariant = (variant: string) => {\n  switch (variant) {\n    case \"error\":\n      return \"var(--red)\";\n    case \"warning\":\n      return \"var(--yellow)\";\n    case \"info\":\n      return \"var(--cyan)\";\n    default:\n      return \"var(--green)\";\n  }\n};\n\nexport const Container = styled.div<ToastStyleProps>`\n  width: 30rem;\n  padding: 1.6rem;\n  display: flex;\n  justify-content: start;\n  align-items: flex-start;\n  background-color: var(--white);\n  gap: 1.6rem;\n\n  border-radius: 0.4rem;\n  box-shadow: 0.2rem 0.2rem 1.2rem 0.2rem var(--box-shadow),\n    0.2rem 0.2rem 1.2rem 0.2rem var(--box-shadow);\n\n  border-left: 0.4rem solid\n    ${({ variant }) => variant && getColorByVariant(variant)};\n\n  &:hover .close-Button {\n    opacity: 1;\n  }\n`;\n\nexport const IconContent = styled.div<ToastStyleProps>`\n  width: 2.4rem;\n  height: 2.4rem;\n  color: ${({ variant }) => variant && getColorByVariant(variant)};\n`;\n\nexport const InfoContent = styled.div`\n  flex: 1;\n  font-size: 1.4rem;\n  line-height: 2rem;\n\n  > p {\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    white-space: pre-line;\n    -webkit-line-clamp: 4;\n    word-break: break-word;\n  }\n`;\n\nexport const TitleContent = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 2rem;\n`;\n\nexport const CustomButton = styled(Button)`\n  padding: 0.6rem 1.6rem;\n  margin-top: 1.6rem;\n  background-color: var(--neutral);\n  color: var(--text-title);\n\n  &:hover,\n  &:focus {\n    background-color: var(--gray);\n  }\n`;\n\nexport const CloseButton = styled(IconButton).attrs({\n  className: \"close-Button\",\n})`\n  width: 2rem;\n  height: 2rem;\n  opacity: 0;\n  transition: ease-in-out 0.2s;\n  color: var(--text);\n\n  &:hover {\n    color: var(--text-title);\n  }\n`;\n","import styled, { css } from \"styled-components\";\n\nexport interface ToastProviderStyleProps {\n  position: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\";\n  reverseOrder?: boolean;\n}\n\nexport const Container = styled.div<ToastProviderStyleProps>`\n  position: fixed;\n  padding: 1rem;\n  max-height: 100vh;\n  overflow: hidden;\n  display: flex;\n  gap: 1rem;\n  z-index: 20;\n\n  > div {\n    animation: leftToRight 250ms linear;\n    background-color: var(--white);\n\n    b {\n      color: var(--text-title);\n    }\n  }\n\n  @keyframes leftToRight {\n    from {\n      transform: translateX(-50%);\n      opacity: 0;\n    }\n\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n\n  @keyframes rightToLeft {\n    from {\n      transform: translateX(50%);\n      opacity: 0;\n    }\n\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n\n  ${({ position, reverseOrder }) => {\n    switch (position) {\n      case \"top-left\":\n        return css`\n          top: 0;\n          left: 0;\n\n          flex-direction: ${reverseOrder ? \"column\" : \"column-reverse\"};\n        `;\n      case \"top-right\":\n        return css`\n          top: 0;\n          right: 0;\n\n          flex-direction: ${reverseOrder ? \"column\" : \"column-reverse\"};\n\n          > div {\n            animation-name: rightToLeft;\n          }\n        `;\n      case \"bottom-left\":\n        return css`\n          left: 0;\n          bottom: 0;\n\n          flex-direction: ${reverseOrder ? \"column-reverse\" : \"column\"};\n        `;\n      default:\n        return css`\n          right: 0;\n          bottom: 0;\n\n          flex-direction: ${reverseOrder ? \"column-reverse\" : \"column\"};\n\n          > div {\n            animation-name: rightToLeft;\n          }\n        `;\n    }\n  }}\n`;\n","import type { ToastProps, ToastVariant } from \"components/Toast\";\nimport { Toast } from \"components/Toast\";\nimport { useMap } from \"hooks\";\nimport type { ReactNode } from \"react\";\nimport { createContext, useCallback, useContext, useMemo } from \"react\";\nimport { generateUID } from \"utils\";\nimport type { ToastProviderStyleProps } from \"./styles\";\nimport { Container } from \"./styles\";\n\nexport interface ToastDataProps extends ToastProviderStyleProps {}\n\nexport interface CreateToastProps extends Omit<ToastProps, \"removeMe\"> {}\n\nexport interface ToastContextProps {\n  success: (args: CreateToastProps) => void;\n  error: (args: CreateToastProps) => void;\n  warning: (args: CreateToastProps) => void;\n  info: (args: CreateToastProps) => void;\n  clearToasts: () => void;\n}\n\nexport interface ToastProviderProps extends ToastDataProps {\n  children: ReactNode;\n}\n\nconst ToastContext = createContext<ToastContextProps>({} as ToastContextProps);\n\nexport const ToastProvider = ({ children, ...args }: ToastProviderProps) => {\n  const [toasts, { add, clear, remove }] = useMap<string, ToastProps>();\n\n  const createToast = useMemo(\n    () =>\n      function (this: ToastVariant, args: CreateToastProps): void {\n        const id = generateUID();\n\n        add(id, {\n          ...args,\n          variant: this,\n          onClose: () => remove(id),\n          title: args.title ?? this,\n        });\n      },\n    [add, remove]\n  );\n\n  const success = useMemo(() => createToast.bind(\"success\"), [createToast]);\n  const error = useMemo(() => createToast.bind(\"error\"), [createToast]);\n  const warning = useMemo(() => createToast.bind(\"warning\"), [createToast]);\n  const info = useMemo(() => createToast.bind(\"info\"), [createToast]);\n\n  const clearToasts = useCallback(() => clear(), [clear]);\n\n  return (\n    <ToastContext.Provider\n      value={{ success, error, warning, info, clearToasts }}\n    >\n      <Container {...args}>\n        {Array.from(toasts ?? [])?.map(([id, props]) => (\n          <Toast {...props} key={id} />\n        ))}\n      </Container>\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToast = () => useContext(ToastContext);\n"],"names":[],"sourceRoot":""}